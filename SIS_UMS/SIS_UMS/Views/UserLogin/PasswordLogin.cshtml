@model SIS_UMS.Models.User
@{
    ViewData["Title"] = "PasswordLogin";
}

<h1>PasswordLogin</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <div>
            @Html.ValidationSummary()

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <!-- Include a hidden field to retain the 'username' value -->
                
                <label for="user_password" class="control-label">Password:</label>
                <input type="password" name="user_password" class="form-control" on id="passwordInput" required />
                <span asp-validation-for="user_password" class="text-danger"></span>
            </div>

            <!-- Display the username -->
            <div>
                Username: @Model.username
            </div>

            <button type="submit"  class="btn btn-primary" id="redirectButton">Login</button>
        </div>
       
    </div>
</div>
<script>
    // Get a reference to the input element
    const inputElement = document.getElementById('passwordInput');

    // Add an event listener to the input element
    inputElement.addEventListener('keyup', function (event) {
        // Check if the key pressed is Enter (key code 13)
        if (event.key === 'Enter') {
            // Call your function here
            Check();
        }
    });

    function Check() {
        // Get the value from the input field
        var password = document.getElementById("passwordInput").value;
        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);

        // Get the value of the 'param' query parameter
        const paramValue = urlParams.get('encryptedUsername');
        console.log(paramValue);

  

        const bobo = 'PassLogin'; // Update with your actual URL

        // Data to be sent in the POST request body
        const data = {
            password_salt: paramValue,
            user_password: password
        };
        console.log(data);
        // Send the POST request using the fetch API
        fetch(bobo, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.redirected) {
                    // Redirect to the URL returned by the action
                    window.location.href = response.url;
                } else {
                    // Handle other responses or errors
                    return response.json();
                }
            })
            .then(responseText => {
                // Handle the response from the server
                console.log('Server Response:', responseText);
            })
            .catch(error => {
                console.error('Error:', error);
            });



    
    };
</script>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
